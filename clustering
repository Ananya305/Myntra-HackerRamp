import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, classification_report
from sklearn.neighbors import NearestNeighbors
from sklearn.metrics.pairwise import cosine_distances

# Load dataset from .npy files
image_features = np.load('image_features.npy')  # Replace with your actual file path
cluster_labels = np.load('cluster_labels.npy')  # Replace with your actual file path
sales_profile = np.load('sales_profile.npy')  # Replace with your actual sales profile data

# Ensure the data shapes match
assert image_features.shape[0] == cluster_labels.shape[0] == sales_profile.shape[0], "Mismatch between number of samples and labels"

# Splitting the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(image_features, cluster_labels, test_size=0.2, random_state=42)

# Standardizing the features (important for SVM and Neural Network)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Initializing the classifiers
classifiers = {
    'Support Vector Machine': SVC(probability=True),
    'Random Forest': RandomForestClassifier(n_estimators=100),
    'Neural Network': MLPClassifier(max_iter=300),
    'Naive Bayes': GaussianNB()
}

# Dictionary to store accuracy results
accuracy_results = {}

# Training and evaluating each classifier
for name, clf in classifiers.items():
    clf.fit(X_train, y_train)
    y_pred = clf.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    accuracy_results[name] = accuracy
    print(f'{name} accuracy: {accuracy:.2f}')
    print(classification_report(y_test, y_pred))

# Identifying the best-performing classifier
best_classifier_name = max(accuracy_results, key=accuracy_results.get)
best_classifier = classifiers[best_classifier_name]
print(f'The best-performing classifier is: {best_classifier_name} with an accuracy of {accuracy_results[best_classifier_name]:.2f}')

# Classifying a new item (replace new_item_features with actual new item features)
new_item_features = np.random.rand(1, X_train.shape[1])  # Random new item for demonstration
new_item_features = scaler.transform(new_item_features)  # Standardize the new item features
assigned_cluster = best_classifier.predict(new_item_features)
print(f'Assigned Cluster: {assigned_cluster}')

# Finding the closest image in the same cluster using k-NN with Cosine Distance
cluster_indices = np.where(cluster_labels == assigned_cluster)[0]
cluster_data = image_features[cluster_indices]
nbrs = NearestNeighbors(n_neighbors=1, metric='cosine').fit(cluster_data)
distances, indices = nbrs.kneighbors(new_item_features)
closest_image_index = cluster_indices[indices[0][0]]
print(f'Closest Image Index in Cluster: {closest_image_index}')

# Predicting the sales profile using the closest image
predicted_sales_profile = sales_profiles[closest_image_index]
print(f'Predicted Sales Profile: {predicted_sales_profile}')
